import {
  init_define_process_env_UNI_STAT_TITLE_JSON
} from "./chunk-HW2SXWXA.js";

// dep:@gykeji_jsutil
init_define_process_env_UNI_STAT_TITLE_JSON();

// node_modules/@gykeji/jsutil/lib/jsutil-esm.js
init_define_process_env_UNI_STAT_TITLE_JSON();
var _GetVarType = (o) => {
  let typeStr = (Object.prototype.toString.call(o).match(/\[object (.*?)\]/) || [])[1];
  if (typeStr === "Object") {
    const constName = o.constructor.name;
    constName !== "Object" && (typeStr = `${typeStr}:${constName}`);
  } else if (typeStr === "Number") {
    if (!isFinite(o)) {
      if (isNaN(o)) {
        typeStr = "NaN";
      } else {
        typeStr = "Infinity";
      }
    }
  }
  return typeStr;
};
var _IsEmpty = (params = "") => {
  const myType = _GetVarType(params);
  if (params === "" || myType === "undefined" || myType === "null" || myType === "array" && params.length === 0 || myType === "object" && Object.keys(params).length === 0) {
    return true;
  }
  return false;
};
var isName = (val) => /^([A-Za-z\.\s]{2,20}|[\u4e00-\u9fa5]{2,20})$/.test(val);
var isPhone = (val) => /^1[3-9]\d{9}$/.test(val);
var isTel = (val) => /^0\d{2,3}-\d{7,8}$/.test(val);
var isEmail = (val) => /^[A-Za-z0-9\u4e00-\u9fa5]+([\.\-_]*[A-Za-z0-9\u4e00-\u9fa5])*@([A-Za-z0-9\u4e00-\u9fa5]+[\.\-_]{0,1}[A-Za-z0-9\u4e00-\u9fa5]+){1,63}\.([A-Za-z0-9\u4e00-\u9fa5]+[\.\-_]{0,1}[A-Za-z0-9\u4e00-\u9fa5]+)+$/.test(val);
var _IsIdCard = (val) => {
  if (_IsEmpty(val)) {
    return false;
  }
  const arrExp = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2], arrValid = [1, 0, "X", 9, 8, 7, 6, 5, 4, 3, ...[2]];
  if (/^\d{17}\d|x$/i.test(val)) {
    let sum = 0, idx, i = 0;
    for (; i < val.length - 1; i++) {
      sum += parseInt(val.substr(i, 1), 10) * arrExp[i];
    }
    idx = sum % 11;
    return arrValid[idx] == val.substr(17, 1).toUpperCase();
  } else {
    return false;
  }
};
var isMoney = (val) => /^(?:0(?:\.[0-9]{1,2}){0,1}|(?!0)[0-9]{1,13}(?:\.[0-9]{1,2})?)$/.test(val.toString());
var _SetCookie = (key, value, { domain, path = "/", expires, secure } = {}) => {
  if (!window) {
    throw new Error("setCookie\u53EA\u652F\u6301\u6D4F\u89C8\u5668\u7AEF\u4F7F\u7528");
  }
  domain = domain || window.location.hostname;
  const time = new Date().getTime();
  window.document.cookie = `${key}=${encodeURI(value)};domain=${domain};path=${path};${expires ? `expires=${new Date(time + expires)}` : ""};${secure ? `secure=${secure}` : ""}`;
};
var _SetSessionStorage = (key, val) => {
  const valStr = JSON.stringify(val);
  if (sessionStorage) {
    sessionStorage.setItem(key, valStr);
  }
};
var _SetLocalStorage = (key, val) => {
  const valStr = JSON.stringify(val);
  if (localStorage) {
    localStorage.setItem(key, valStr);
  }
};
var _GetCookie = (key) => {
  if (!window) {
    throw new Error("getCookie\u53EA\u652F\u6301\u6D4F\u89C8\u5668\u7AEF\u4F7F\u7528");
  }
  const r = new RegExp(`(?:^|;+|\\s+)${key}=([^;]*)`), m = window.document.cookie.match(r);
  return !m ? null : decodeURI(m[1]);
};
var _GetSessionStorage = (key) => {
  let val = null;
  if (sessionStorage) {
    sessionStorage.getItem(key);
  }
  return val;
};
var _GetLocalStorage = (key) => {
  let val = null;
  if (localStorage) {
    localStorage.getItem(key);
  }
  return val;
};
var getUaInfo = () => {
  const ua = navigator.userAgent.toLocaleLowerCase();
  let b = "", s = "";
  if (ua.search(/chrome\/(\d+\.\d+)/i) > 0) {
    b = "chrome";
  } else if (ua.search(/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i) > 0) {
    b = "safari";
  } else if (ua.search(/firefox\/(\d+\.\d+)/i) > 0) {
    b = "firefox";
  } else if (ua.search(/msie (\d+\.\d+)|trident\/(\d+\.\d+)|edge\/(\d+\.\d+)/i) > 0) {
    b = "ie";
  } else if (ua.search(/opera\/(\d+\.\d+)/i) > 0) {
    b = "opera";
  }
  if (ua.search(/android/i) > 0) {
    s = "android";
  } else if (ua.search(/ipad/i) > 0) {
    s = "ipad";
  } else if (ua.search(/iphone/i) > 0) {
    s = "iphone";
  } else if (ua.search(/macintosh/i) > 0) {
    s = "mac";
  } else if (ua.search(/windows/i) > 0) {
    s = "windows";
  }
  return { browser: b, system: s };
};
var _GetIdCardSex = (idCard, sexDesc = ["\u7537", "\u5973"]) => {
  let sex = Number(idCard.slice(16, 17)) % 2 === 0 ? 1 : 0, sexName = sexDesc[sex];
  return {
    sex,
    sexName
  };
};
var _GetIdCardBrithDay = (idCard) => idCard.slice(6, 14);
var MyObjectURL = class {
  constructor(objectURL) {
    this.url = objectURL;
  }
  revoke() {
    const MyURL = window.URL || window.webkitURL;
    MyURL.revokeObjectURL(this.url);
  }
};
var _FormatBlobUrl = (blob) => {
  let objectURL = "";
  const MyURL = window.URL || window.webkitURL;
  objectURL = MyURL.createObjectURL(blob);
  return new MyObjectURL(objectURL);
};
var _FormatJsonSearch = (myJson, prefix = "?") => {
  if (_GetVarType(myJson) !== "object") {
    throw new Error("\u7B2C\u4E00\u4E2A\u53C2\u6570\uFF08\u683C\u5F0F\u5316\u5BF9\u8C61\uFF09\u5FC5\u987B\u662FJSON\u5BF9\u8C61");
  }
  let arr = [];
  for (let i in myJson) {
    arr.push(`${i}=${encodeURIComponent(myJson[i])}`);
  }
  return `${prefix}${arr.join("&")}`;
};
var _FormatSearchJson = (search) => {
  search = search.replace(/\?/g, "&");
  let searchArr = search.split("&"), obj = {};
  searchArr.forEach((i) => {
    const me = i.split("=");
    if (me[0]) {
      obj[me[0]] = decodeURIComponent(me[1]);
    }
  });
  return obj;
};
var _FormatMoneyNumCapital = (n, h) => {
  const fraction = ["\u89D2", "\u5206"], digit = [
    "\u96F6",
    "\u58F9",
    "\u8D30",
    "\u53C1",
    "\u8086",
    "\u4F0D",
    "\u9646",
    "\u67D2",
    "\u634C",
    "\u7396"
  ], unit = [
    ["\u5143", "\u4E07", "\u4EBF"],
    ["", "\u62FE", "\u4F70", "\u4EDF"]
  ];
  h = n < 0 ? h || "" : "";
  let d = (n.toString().split(".")[1] || "").split(""), s = "";
  n = Math.abs(n);
  if (d.length > 0) {
    for (let i = 0; i < fraction.length; i++) {
      s += (digit[Number(d[i])] + fraction[i]).replace(/零./, "");
    }
  }
  s = s || "\u6574";
  n = Math.floor(n);
  for (let i = 0; i < unit[0].length && n > 0; i++) {
    let p = "";
    for (let j = 0; j < unit[1].length && n > 0; j++) {
      p = digit[n % 10] + unit[1][j] + p;
      n = Math.floor(n / 10);
    }
    s = p.replace(/(零.)*零$/, "").replace(/^$/, "\u96F6") + unit[0][i] + s;
  }
  return h + s.replace(/(零.)*零元/, "\u5143").replace(/(零.)+/g, "\u96F6").replace(/^整$/, "\u96F6\u5143\u6574");
};
var _FormatDate = (date, fmt = "yyyy/mm/dd") => {
  const dateType = _GetVarType(date);
  if (dateType === "string") {
    date = date.replace(/\D+/ig, "/");
    let arr = date.split("/");
    if (arr.length > 3) {
      let time = ` ${arr[3]}:${arr[4]}:${arr[5]}`;
      arr.length = 3;
      date = arr.join("/") + time;
    }
  }
  try {
    date = date ? dateType === "date" ? date : new Date(date) : new Date();
  } catch (e) {
    throw new Error("\u4E0D\u80FD\u8BC6\u522B\u7684\u65F6\u95F4\u683C\u5F0F");
  }
  const o = {
    "m+": date.getMonth() + 1,
    "d+": date.getDate(),
    "h+": date.getHours(),
    "i+": date.getMinutes(),
    "s+": date.getSeconds(),
    "q+": Math.floor((date.getMonth() + 3) / 3),
    "l+": date.getMilliseconds()
  };
  if (/(y+)/i.test(fmt)) {
    fmt = fmt.replace(RegExp.$1, date.getFullYear().toString().substr(4 - RegExp.$1.length));
  }
  for (let k in o) {
    if (new RegExp(`(${k})`, "i").test(fmt)) {
      const str = o[k].toString();
      fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? str : `0${str}`.substr(str.length - 1));
    }
  }
  return fmt;
};
var _FormatMoneySymbol = (money) => {
  const moneyType = _GetVarType(money);
  if (money === "" || moneyType === "null" || moneyType === "undefined") {
    return null;
  }
  const strMonery = parseFloat(money).toFixed(2).toString(), intNum = parseInt(strMonery).toString(), floatNum = strMonery.split(".");
  let str = "";
  if (intNum > 999999) {
    str = intNum.split("").reverse().reduce((prev, next, index) => {
      return (index % 3 ? next : next + ",") + prev;
    });
  } else {
    str = intNum;
  }
  return str += `.${floatNum[1]}`;
};
var _LimitInt = (val) => val.toString().replace(/[\D]/g, "");
var _LimitIntFloat = (val, digit) => {
  let num = val.toString();
  num = num.replace(/[^\d\.]/g, "");
  num = num.replace(".", "$#$").replace(/\./g, "").replace("$#$", ".");
  num = num.replace(/^0[\d]+/, "0");
  if (digit != null) {
    num = num.replace(new RegExp(`^(\\d+)(\\.?)(\\d{0,${digit}}).*$`), "$1$2$3");
  }
  return num;
};
var _LimitPNInt = (val) => {
  let num = val.toString();
  num = num.replace(/[^\d\-]/g, "");
  num = num.replace(/^-/, "$#$").replace(/\-/g, "").replace("$#$", "-");
  num = num.replace(/^(\-?)0[\d]+/, "$10");
  return num;
};
var _LimitPNIntFloat = (val, digit) => {
  let num = val.toString();
  num = num.replace(/[^\d\.\-]/g, "");
  num = num.replace(/^-/, "$#$").replace(/\-/g, "").replace("$#$", "-");
  num = num.replace(".", "$#$").replace(/\./g, "").replace("$#$", ".");
  num = num.replace(/^(\-?)0[\d]+/, "$10");
  num = num.replace(/^\./, "0.");
  if (digit != null) {
    num = num.replace(new RegExp(`^(-|\\d+)(\\.?)(\\d{0,${digit}}).*$`), "$1$2$3");
  }
  return num;
};
var _LimitMoney = (val) => {
  let num = val.toString();
  num = num.replace(/[^\d.]/g, "");
  num = num.replace(/^0\d[0-9]*/g, "");
  num = num.replace(/^\./g, "");
  num = num.replace(".", "$#$").replace(/\./g, "").replace("$#$", ".");
  num = Math.floor(num * 100) / 100;
  return num;
};
var _LoadScript = (scripts) => {
  const scriptArr = _GetVarType(scripts) === "string" ? [scripts] : scripts, HEAD = document.getElementsByTagName("head").item(0) || document.documentElement;
  let loaded = 0;
  return new Promise((resolve, reject) => {
    try {
      for (let i = 0; i < scriptArr.length; i++) {
        const scriptNode = document.createElement("script"), scriptLoad = function() {
          if (!this.readyState || (this.readyState == "loaded" || this.readyState == "complete")) {
            loaded++;
            this.onload = this.onreadystatechange = null;
            this.parentNode.removeChild(this);
            if (loaded == scriptArr.length) {
              resolve(true);
            }
          }
        };
        scriptNode.setAttribute("type", "text/javascript");
        scriptNode.setAttribute("src", scriptArr[i]);
        scriptNode.addEventListener("load", scriptLoad);
        scriptNode.addEventListener("readystatechange", scriptLoad);
        HEAD.appendChild(scriptNode);
      }
    } catch (e) {
      reject(false);
    }
  });
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
var _LoadScriptAwait = (scripts) => __awaiter(void 0, void 0, void 0, function* () {
  const scriptArr = _GetVarType(scripts) === "string" ? [scripts] : scripts;
  for (let i = 0, item; i < scriptArr.length; i++) {
    item = scriptArr[i];
    yield _LoadScript(item);
  }
});
var _CreateUUID = (len, radix) => {
  const chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
  let uuid = [], i = 0;
  radix = radix || chars.length;
  if (len) {
    for (i = 0; i < len; i++)
      uuid[i] = chars[0 | Math.random() * radix];
  } else {
    let r = 0;
    uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";
    uuid[14] = "4";
    for (i = 0; i < 36; i++) {
      if (!uuid[i]) {
        r = 0 | Math.random() * 16;
        uuid[i] = chars[i == 19 ? r & 3 | 8 : r];
      }
    }
  }
  return uuid.join("");
};
var _Extend = (target, ...args) => {
  const last = args[args.length - 1], lastType = _GetVarType(last), deep = lastType === "boolean" ? last : true, soucre = args;
  if (lastType === "boolean") {
    soucre.length = soucre.length - 1;
  }
  if (soucre.length > 1) {
    soucre.forEach((item) => {
      target = _Extend(target, item, deep);
    });
  } else {
    const curSoucre = soucre[0];
    for (let key in curSoucre) {
      const me = curSoucre[key], meType = _GetVarType(me);
      if (deep && ["array", "object"].includes(meType)) {
        let _target = null;
        if (["object"].includes(meType)) {
          _target = ["object"].includes(_GetVarType(target[key])) ? target[key] : {};
        } else {
          _target = ["array"].includes(_GetVarType(target[key])) ? target[key] : [];
        }
        target[key] = _Extend(_target, me);
      } else if (me !== void 0) {
        target[key] = me;
      }
    }
  }
  return target;
};
var _FillZero = (num) => {
  let res = num;
  if (num < 10 && num >= 0 && num.toString().indexOf(".") < 0) {
    res = `0${num}`;
  }
  return res;
};
var suffixMap = {
  "image/jpeg": "jpeg",
  "image/jpg": "jpeg",
  "image/png": "png",
  "image/gif": "gif",
  "application/msexcel": "xlxs",
  "application/vnd.ms-excel": "xls",
  "application/msword": "doc",
  "application/pdf": "pdf",
  "application/vnd.ms-powerpoint": "ppt"
};
var _DownBlobFile = (blob, { name, suffix } = {}) => {
  const $a = document.createElement("a"), fileName = blob.name || "", urlObject = _FormatBlobUrl(blob);
  let index = 0, blobSuffix = "", blobName = "";
  if (fileName) {
    index = fileName.lastIndexOf(".");
    blobSuffix = fileName.substring(index + 1, fileName.length);
    blobName = fileName.substring(0, index);
  }
  let myName = name || blobName || _FormatDate(new Date(), "yyyymmddhhiiss"), mySuffix = suffix || blobSuffix || suffixMap[blob.type];
  $a.href = urlObject.url;
  $a.download = `${myName}.${mySuffix}`;
  $a.click();
};
var _LoactionReplace = (url) => {
  if (window.history.replaceState) {
    window.history.replaceState(null, window.document.title, url);
    window.history.go(0);
  } else {
    window.location.replace(url);
  }
};
var _CopyText = (str) => {
  try {
    let input = document.createElement("textarea");
    input.value = str;
    input.style.width = "0";
    input.style.height = "0";
    input.style.position = "fixed";
    input.style.opacity = "0";
    document.body.appendChild(input);
    input.select();
    document.execCommand("copy");
    document.body.removeChild(input);
    return true;
  } catch (e) {
    return false;
  }
};
var _ToAsyncAwait = (promise, fromatResult = true) => {
  if (!fromatResult) {
    return promise;
  } else {
    return promise.then((res) => ({ error: null, result: res })).catch((err) => ({ error: err, result: null }));
  }
};
var _Calc = (symbol, number1, number2, ...args) => {
  if (!["+", "-", "*", "/"].includes(symbol)) {
    throw new Error("\u7B2C\u4E00\u4E2A\u53C2\u6570\u8BF7\u4F20+ - * /\u8BA1\u7B97\u7B26");
  }
  const num1 = Number(number1);
  const num2 = Number(number2);
  if (isNaN(num1) || isNaN(num2)) {
    throw new Error("\u7B2C\u4E8C\uFF0C\u4E09\u4E2A\u53C2\u6570\u5FC5\u987B\u4F20\u5165\u53EF\u8BA1\u7B97\u6570\u5B57\u6216\u5B57\u7B26");
  }
  let result = 0;
  const [num1BeforeInt, num1Float] = num1.toString().split(".");
  const [num2BeforeInt, num2Float] = num2.toString().split(".");
  const num1FloatLen = (num1Float === null || num1Float === void 0 ? void 0 : num1Float.length) || 0;
  const num2FloatLen = (num2Float === null || num2Float === void 0 ? void 0 : num2Float.length) || 0;
  const num1Int = Number(num1.toString().replace(".", ""));
  const num2Int = Number(num2.toString().replace(".", ""));
  if (symbol === "+" || symbol === "-") {
    let m = Math.max(num1FloatLen, num2FloatLen);
    const resNum1 = Number(`${num1BeforeInt}${num1Float.padEnd(m, "0")}`);
    const resNum2 = Number(`${num2BeforeInt}${num2Float.padEnd(m, "0")}`);
    if (symbol === "+") {
      result = (resNum1 + resNum2) / Math.pow(10, m);
    } else {
      result = (resNum1 - resNum2) / Math.pow(10, m);
    }
  } else if (symbol === "*") {
    let m = Math.pow(10, num1FloatLen + num2FloatLen);
    result = num1Int * num2Int / m;
  } else if (symbol === "/") {
    let m = Math.pow(10, num2FloatLen - num1FloatLen);
    result = num1Int / num2Int * m;
  }
  const nextNum = args[0];
  if (nextNum) {
    args.shift();
    result = _Calc(symbol, result, nextNum, ...args);
  }
  return result;
};
var _Debounce = (fn, delay, immediate) => {
  let timer;
  if (_GetVarType(fn) !== "Function") {
    throw new Error("\u7B2C\u4E00\u4E2A\u53C2\u6570\uFF0C\u9700\u8981\u4E3A\u51FD\u6570\u54E6~");
  }
  return (args) => {
    if (timer)
      clearTimeout(timer);
    if (immediate) {
      const callNow = !timer;
      timer = setTimeout(() => {
        timer = null;
      }, delay);
      if (callNow) {
        fn(args);
      }
    } else {
      timer = setTimeout(() => {
        fn(args);
      }, delay);
    }
  };
};
var _Throttle = (fn, delay = 500, type = 1) => {
  let previous = 0, timer;
  if (_GetVarType(fn) !== "Function") {
    throw new Error("\u7B2C\u4E00\u4E2A\u53C2\u6570\uFF0C\u9700\u8981\u4E3A\u51FD\u6570\u54E6~");
  }
  return (args) => {
    if (type === 1 || type === 3) {
      let now = Date.now();
      if (now - previous > delay) {
        fn(args);
        previous = now;
      }
    }
    if (type === 2 || type === 3) {
      if (!timer) {
        timer = setTimeout(() => {
          clearTimeout(timer);
          timer = null;
          fn(args);
        }, delay);
      }
    }
  };
};
var formatUnitTime = (formatStr, unit, timeNum) => {
  return formatStr.replace(unit, unit.length > 1 ? _FillZero(timeNum) : timeNum);
};
var _FormatNumTime = (secondNum, format = "dd\u5929hh\u65F6ii\u5206ss\u79D2", fill = true) => {
  var _a2, _b2, _c2, _d, _e, _f;
  let result = {};
  if (_GetVarType(Number(secondNum)) !== "Number") {
    throw new Error("\u7B2C\u4E00\u4E2A\u53C2\u6570\u4E3A\u9700\u8981\u8BA1\u7B97\u7684\u79D2\u6570");
  }
  const unitDay = (_a2 = format.match(/(d+)/i)) === null || _a2 === void 0 ? void 0 : _a2[0];
  const unitHours = (_b2 = format.match(/(h+)/i)) === null || _b2 === void 0 ? void 0 : _b2[0];
  const unitMinute = (_c2 = format.match(/(i+)/i)) === null || _c2 === void 0 ? void 0 : _c2[0];
  const unitSecond = (_d = format.match(/(s+)/i)) === null || _d === void 0 ? void 0 : _d[0];
  let formatTimeStr = format;
  if (unitDay) {
    result.day = Math.floor(secondNum / 86400);
    result.hours = Math.floor(secondNum % 86400 / 3600);
    result.minute = Math.floor(secondNum % 3600 / 60);
  } else if (unitHours) {
    result.hours = Math.floor(secondNum / 3600);
    result.minute = Math.floor(secondNum % 3600 / 60);
  } else {
    result.minute = Math.floor(secondNum / 60);
  }
  result.second = Math.floor(secondNum % 60);
  if (!_IsEmpty(result.day)) {
    if (result.day === 0 && !fill) {
      formatTimeStr = formatTimeStr.replace(formatTimeStr.substring(0, (_e = formatTimeStr.match(/(h+)/i)) === null || _e === void 0 ? void 0 : _e.index), "");
    } else {
      formatTimeStr = formatUnitTime(formatTimeStr, unitDay, result.day);
    }
  }
  if (!_IsEmpty(result.hours)) {
    if (!result.day && result.hours === 0 && !fill) {
      formatTimeStr = formatTimeStr.replace(formatTimeStr.substring(0, (_f = formatTimeStr.match(/(i+)/i)) === null || _f === void 0 ? void 0 : _f.index), "");
    } else {
      formatTimeStr = formatUnitTime(formatTimeStr, unitHours, result.hours);
    }
  }
  formatTimeStr = formatUnitTime(formatTimeStr, unitMinute, result.minute);
  formatTimeStr = formatUnitTime(formatTimeStr, unitSecond, result.second);
  result.formatTime = formatTimeStr;
  return result;
};
var STATUS;
(function(STATUS2) {
  STATUS2["AWAIT"] = "await";
  STATUS2["PROGRESS"] = "progress;";
  STATUS2["STOP"] = "stop";
  STATUS2["FINISH"] = "finish";
})(STATUS || (STATUS = {}));
var FORMAT_STR = "dd\u5929hh\u65F6ii\u5206ss\u79D2";
var _calcSecond = Symbol();
var Countdown = class {
  constructor(options) {
    this.secondNum = 0;
    this.curTime = 0;
    this.endTimeNum = 0;
    this.secondDiff = 0;
    this.stopCalc = null;
    this.result = { status: STATUS.AWAIT, formatTime: "" };
    try {
      this.endTimeNum = new Date(options.endTime).getTime();
    } catch (e) {
      throw new Error("time\u53C2\u6570\u5FC5\u987B\u662F\u4E00\u4E2A\u53EF\u8BC6\u522B\u7684\u65F6\u95F4\u53C2\u6570");
    }
    this.options = options;
    if (options.start) {
      this.start();
    }
  }
  [_calcSecond]() {
    this.secondNum--;
    let formatRes = _FormatNumTime(this.secondNum, this.options.format, this.options.fill);
    this.result = { status: STATUS.PROGRESS, formatTime: formatRes.formatTime };
    this.options.callback && this.options.callback(this.result);
    if (this.secondNum < 1) {
      this.destroy();
    } else {
      this.stopCalc = setTimeout(() => {
        this[_calcSecond]();
      }, 1e3);
    }
  }
  start() {
    if (this.result.status === STATUS.AWAIT || this.result.status === STATUS.STOP) {
      this.curTime = new Date().getTime();
      this.secondDiff = Math.floor((this.endTimeNum - this.curTime) / 1e3);
      this.secondNum = this.secondDiff > 0 ? this.secondDiff : 0;
      this[_calcSecond]();
    }
  }
  stop() {
    this.result.status = STATUS.STOP;
    clearTimeout(this.stopCalc);
  }
  destroy() {
    this.result.status = STATUS.FINISH;
    clearTimeout(this.stopCalc);
    this.options.finishCallback && this.options.finishCallback(this.result);
  }
};
var _CreateCountdown = ({ endTime, format = FORMAT_STR, fill = true, callback, finishCallback, start = true }) => {
  return new Countdown({
    endTime,
    format,
    fill,
    callback,
    finishCallback,
    start
  });
};
var _a;
var _b;
var _c;
var objectSymbol = Symbol("object");
var arraySymbol = Symbol("array");
var paramSymbol = Symbol("param");
var EsEnum = class {
  constructor(params) {
    this[_a] = {};
    this[_b] = [];
    this[_c] = {};
    if (_GetVarType(params) !== "Object") {
      throw new Error("\u53C2\u6570\u5FC5\u987B\u4E3A\u5BF9\u8C61");
    }
    this[paramSymbol] = params;
    this[objectSymbol] = Object.assign({}, params);
    let valueType = "";
    for (let key in params) {
      const item = params[key];
      const itemType = _GetVarType(item);
      if (valueType && valueType !== itemType) {
        throw new Error(`\u4E0D\u652F\u6301\u540C\u6570\u636E\u7C7B\u578B\u679A\u4E3E\u503C:${valueType} \u548C ${itemType}`);
      }
      valueType = itemType;
      let enumItem = {};
      if (["Number", "String", "Boolean"].includes(itemType)) {
        if (this[objectSymbol][item]) {
          throw new Error(`\u60A8\u7684\u679A\u4E3E\u503C\u5B58\u5728\u76F8\u540C\u9879\uFF1A${item}`);
        }
        this[objectSymbol][item] = key;
        enumItem = { key, value: item };
      } else if (itemType === "Object") {
        for (let childrenVal of Object.values(item)) {
          if (this[objectSymbol][childrenVal]) {
            throw new Error(`\u60A8\u7684\u679A\u4E3E\u503C\u5B58\u5728\u76F8\u540C\u9879\uFF1A${childrenVal}`);
          }
          if (["Number", "String"].includes(_GetVarType(childrenVal))) {
            enumItem = Object.assign(Object.assign({}, item), { key });
            this[objectSymbol][childrenVal] = enumItem;
            this[objectSymbol][key] = enumItem;
          } else {
            throw new Error("\u679A\u4E3E\u503C\u4E3A\u5BF9\u8C61\u65F6\uFF0C\u5BF9\u8C61\u5C5E\u6027\u503C\u53EA\u80FD\u662F\u5B57\u7B26\u4E32\u3001\u6570\u5B57");
          }
        }
      } else {
        throw new Error("\u679A\u4E3E\u503C\u53EA\u80FD\u662F\u5B57\u7B26\u4E32\u3001\u6570\u5B57\u3001\u6216\u5BF9\u8C61\u7C7B\u578B");
      }
      this[arraySymbol].push(enumItem);
      Object.freeze(enumItem);
    }
    Object.assign(this, this[objectSymbol]);
    Object.freeze(this[arraySymbol]);
    Object.freeze(this[objectSymbol]);
    Object.freeze(this[paramSymbol]);
  }
  getOriginalObject() {
    return this[paramSymbol];
  }
  getEnumArray() {
    return this[arraySymbol];
  }
  getEnumObject() {
    return this[objectSymbol];
  }
};
_a = objectSymbol, _b = arraySymbol, _c = paramSymbol;
var _CreateEnum = (par) => {
  let obj = new EsEnum(par);
  return Object.freeze(obj);
};
var jsutil = Object.freeze({
  __proto__: null,
  _IsEmpty,
  _IsName: isName,
  _IsPhone: isPhone,
  _IsTel: isTel,
  _IsEmail: isEmail,
  _IsIdCard,
  _IsMoney: isMoney,
  _SetCookie,
  _SetSessionStorage,
  _SetLocalStorage,
  _GetCookie,
  _GetSessionStorage,
  _GetLocalStorage,
  _GetVarType,
  _GetUaInfo: getUaInfo,
  _GetIdCardSex,
  _GetIdCardBrithDay,
  _FormatDate,
  _FormatNumTime,
  _FormatMoneySymbol,
  _FormatMoneyNumCapital,
  _FormatBlobUrl,
  _FormatJsonSearch,
  _FormatSearchJson,
  _LimitInt,
  _LimitIntFloat,
  _LimitPNInt,
  _LimitPNIntFloat,
  _LimitMoney,
  _LoadScript,
  _LoadScriptAwait,
  _CreateUUID,
  _Extend,
  _FillZero,
  _DownBlobFile,
  _LoactionReplace,
  _CopyText,
  _ToAsyncAwait,
  _Calc,
  _Debounce,
  _Throttle,
  _CreateCountdown,
  _CreateEnum
});
var jsutil_esm_default = jsutil;

// dep:@gykeji_jsutil
var gykeji_jsutil_default = jsutil_esm_default;
export {
  _Calc,
  _CopyText,
  _CreateCountdown,
  _CreateEnum,
  _CreateUUID,
  _Debounce,
  _DownBlobFile,
  _Extend,
  _FillZero,
  _FormatBlobUrl,
  _FormatDate,
  _FormatJsonSearch,
  _FormatMoneyNumCapital,
  _FormatMoneySymbol,
  _FormatNumTime,
  _FormatSearchJson,
  _GetCookie,
  _GetIdCardBrithDay,
  _GetIdCardSex,
  _GetLocalStorage,
  _GetSessionStorage,
  getUaInfo as _GetUaInfo,
  _GetVarType,
  isEmail as _IsEmail,
  _IsEmpty,
  _IsIdCard,
  isMoney as _IsMoney,
  isName as _IsName,
  isPhone as _IsPhone,
  isTel as _IsTel,
  _LimitInt,
  _LimitIntFloat,
  _LimitMoney,
  _LimitPNInt,
  _LimitPNIntFloat,
  _LoactionReplace,
  _LoadScript,
  _LoadScriptAwait,
  _SetCookie,
  _SetLocalStorage,
  _SetSessionStorage,
  _Throttle,
  _ToAsyncAwait,
  gykeji_jsutil_default as default
};
//# sourceMappingURL=@gykeji_jsutil.js.map
